const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');

function setupPainelRoutes(app, db) {

  // ğŸ“„ PDF
  app.get('/painel/pdf', (req, res) => {
    const { cidade_id, data_de, data_ate, natureza, status, tipo_local, tipo_envolvido } = req.query;
    const filtros = [];
    const params = [];

    if (cidade_id) filtros.push('o.cidade_id = ?'), params.push(cidade_id);
    if (data_de)   filtros.push('date(o.data_hora_fato) >= date(?)'), params.push(data_de);
    if (data_ate)  filtros.push('date(o.data_hora_fato) <= date(?)'), params.push(data_ate);
    if (natureza)  filtros.push('o.natureza LIKE ?'), params.push(`%${natureza}%`);
    if (status === 'abertas')   filtros.push('o.encerrada = 0');
    else if (status === 'encerradas') filtros.push('o.encerrada = 1');
    else if (status === 'reabertas')  filtros.push('o.motivo_reabertura IS NOT NULL');
    if (tipo_local) filtros.push('o.tipo_local LIKE ?'), params.push(`%${tipo_local}%`);
    if (tipo_envolvido) {
      filtros.push('EXISTS (SELECT 1 FROM envolvidos_ocorrencia eo WHERE eo.ocorrencia_id = o.id AND eo.tipo = ?)');
      params.push(tipo_envolvido);
    }

    const where = filtros.length ? `WHERE ${filtros.join(' AND ')}` : '';

    db.all(
      `SELECT c.cidade, COUNT(*) AS total
       FROM ocorrencias o
       LEFT JOIN cidades c ON c.id = o.cidade_id
       ${where}
       GROUP BY c.cidade`,
      params,
      (err, porCidade) => {
        if (err) return res.status(500).send('Erro ao gerar PDF');

        db.all(
          `SELECT natureza, COUNT(*) AS total
           FROM ocorrencias o
           ${where}
           GROUP BY natureza`,
          params,
          (err2, porNatureza) => {
            if (err2) return res.status(500).send('Erro ao gerar PDF');

            db.all(
              `SELECT u.nome_completo AS usuario, COUNT(*) AS total
               FROM ocorrencias o
               LEFT JOIN usuarios u ON u.id = o.usuario_id
               ${where}
               GROUP BY u.nome_completo`,
              params,
              (err3, porUsuario) => {
                if (err3) return res.status(500).send('Erro ao gerar PDF');

                const doc = new PDFDocument();
                res.setHeader('Content-Type', 'application/pdf');
                res.setHeader('Content-Disposition', 'attachment; filename="painel.pdf"');
                doc.pipe(res);

                doc.fontSize(18).text('RelatÃ³rio do Painel de OcorrÃªncias', { align: 'center' }).moveDown();
                doc.fontSize(14).text('OcorrÃªncias por Cidade:').moveDown();
                porCidade.forEach(item => doc.text(`- ${item.cidade}: ${item.total}`));
                doc.moveDown();
                doc.fontSize(14).text('OcorrÃªncias por Natureza:').moveDown();
                porNatureza.forEach(item => doc.text(`- ${item.natureza}: ${item.total}`));
                doc.moveDown();
                doc.fontSize(14).text('OcorrÃªncias por UsuÃ¡rio:').moveDown();
                porUsuario.forEach(item => doc.text(`- ${item.usuario}: ${item.total}`));
                doc.end();
              }
            );
          }
        );
      }
    );
  });

  // ğŸ“Š Excel
  app.get('/painel/excel', (req, res) => {
    const { cidade_id, data_de, data_ate, natureza, status, tipo_local, tipo_envolvido } = req.query;
    const filtros = [];
    const params = [];

    if (cidade_id) filtros.push('o.cidade_id = ?'), params.push(cidade_id);
    if (data_de)   filtros.push('date(o.data_hora_fato) >= date(?)'), params.push(data_de);
    if (data_ate)  filtros.push('date(o.data_hora_fato) <= date(?)'), params.push(data_ate);
    if (natureza)  filtros.push('o.natureza LIKE ?'), params.push(`%${natureza}%`);
    if (status === 'abertas')   filtros.push('o.encerrada = 0');
    else if (status === 'encerradas') filtros.push('o.encerrada = 1');
    else if (status === 'reabertas')  filtros.push('o.motivo_reabertura IS NOT NULL');
    if (tipo_local) filtros.push('o.tipo_local LIKE ?'), params.push(`%${tipo_local}%`);
    if (tipo_envolvido) {
      filtros.push('EXISTS (SELECT 1 FROM envolvidos_ocorrencia eo WHERE eo.ocorrencia_id = o.id AND eo.tipo = ?)');
      params.push(tipo_envolvido);
    }

    const where = filtros.length ? `WHERE ${filtros.join(' AND ')}` : '';
    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('Painel');
    sheet.columns = [
      { header: 'Tipo', key: 'tipo', width: 25 },
      { header: 'Nome', key: 'nome', width: 30 },
      { header: 'Total', key: 'total', width: 15 }
    ];

    db.all(
      `SELECT c.cidade AS nome, COUNT(*) AS total
       FROM ocorrencias o
       LEFT JOIN cidades c ON c.id = o.cidade_id
       ${where}
       GROUP BY c.cidade`,
      params,
      (err, porCidade) => {
        if (err) return res.status(500).send('Erro ao gerar Excel');
        porCidade.forEach(row => sheet.addRow({ tipo: 'Cidade', nome: row.nome, total: row.total }));

        db.all(
          `SELECT natureza AS nome, COUNT(*) AS total
           FROM ocorrencias o
           ${where}
           GROUP BY natureza`,
          params,
          (err2, porNatureza) => {
            if (err2) return res.status(500).send('Erro ao gerar Excel');
            porNatureza.forEach(row => sheet.addRow({ tipo: 'Natureza', nome: row.nome, total: row.total }));

            db.all(
              `SELECT u.nome_completo AS nome, COUNT(*) AS total
               FROM ocorrencias o
               LEFT JOIN usuarios u ON u.id = o.usuario_id
               ${where}
               GROUP BY u.nome_completo`,
              params,
              (err3, porUsuario) => {
                if (err3) return res.status(500).send('Erro ao gerar Excel');
                porUsuario.forEach(row => sheet.addRow({ tipo: 'UsuÃ¡rio', nome: row.nome, total: row.total }));

                res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                res.setHeader('Content-Disposition', 'attachment; filename="painel.xlsx"');
                workbook.xlsx.write(res).then(() => res.end());
              }
            );
          }
        );
      }
    );
  });

  // ğŸ–¥ Dashboard
  app.get('/painel', (req, res) => {
    const { cidade_id, data_de, data_ate, natureza, status, tipo_local, tipo_envolvido } = req.query;
    const filtros = [];
    const params = [];

    if (cidade_id) filtros.push('o.cidade_id = ?'), params.push(cidade_id);
    if (data_de)   filtros.push('date(o.data_hora_fato) >= date(?)'), params.push(data_de);
    if (data_ate)  filtros.push('date(o.data_hora_fato) <= date(?)'), params.push(data_ate);
    if (natureza)  filtros.push('o.natureza LIKE ?'), params.push(`%${natureza}%`);
    if (status === 'abertas')   filtros.push('o.encerrada = 0');
    else if (status === 'encerradas') filtros.push('o.encerrada = 1');
    else if (status === 'reabertas')  filtros.push('o.motivo_reabertura IS NOT NULL');
    if (tipo_local) filtros.push('o.tipo_local LIKE ?'), params.push(`%${tipo_local}%`);
    if (tipo_envolvido) {
      filtros.push('EXISTS (SELECT 1 FROM envolvidos_ocorrencia eo WHERE eo.ocorrencia_id = o.id AND eo.tipo = ?)');
      params.push(tipo_envolvido);
    }

    const where = filtros.length ? `WHERE ${filtros.join(' AND ')}` : '';
    console.log('[Painel] where:', where, 'params:', params);

    // Carrega dropdown de cidades
    db.all('SELECT id, cidade FROM cidades ORDER BY cidade', [], (errCities, cidadesList) => {
      if (errCities) return res.status(500).send(errCities.message);
      const dados = { stats: {}, tendencia: {}, porCidade: [], porNatureza: [], porUsuario: [], liberadasPorCidade: [], encerradasPorCidade: [], solicitacoes: {}, porOrgao: [], porCidadeSolic: [], recentes: [] };

      // Cards e grÃ¡ficos
      db.get(`SELECT COUNT(*) AS total FROM ocorrencias o ${where}`, params, (err, row) => {
        if (err) return res.status(500).send(err.message);
        dados.stats.total = row.total;

        db.get(`SELECT COUNT(*) AS abertas FROM ocorrencias o ${where} AND o.encerrada = 0`, params, (err2, row2) => {
          if (err2) return res.status(500).send(err2.message);
          dados.stats.abertas = row2.abertas;

          db.get(`SELECT COUNT(*) AS encerradas FROM ocorrencias o ${where} AND o.encerrada = 1`, params, (err3, row3) => {
            if (err3) return res.status(500).send(err3.message);
            dados.stats.encerradas = row3.encerradas;

            db.get(`SELECT COUNT(*) AS reabertas FROM ocorrencias o ${where} AND o.motivo_reabertura IS NOT NULL`, params, (err4, row4) => {
              if (err4) return res.status(500).send(err4.message);
              dados.stats.reabertas = row4.reabertas;

              db.get(`SELECT COUNT(*) AS liberadas FROM ocorrencias_liberadas l JOIN ocorrencias o ON o.id = l.ocorrencia_id ${where}`, params, (err5, row5) => {
                if (err5) return res.status(500).send(err5.message);
                dados.liberadas = row5.liberadas;

                db.get(`SELECT COUNT(DISTINCT o.cidade_id) AS cidades, COUNT(DISTINCT o.usuario_id) AS usuarios FROM ocorrencias o ${where}`, params, (err6, row6) => {
                  if (err6) return res.status(500).send(err6.message);
                  dados.cidades = row6.cidades;
                  dados.usuarios = row6.usuarios;

                  // Demais grÃ¡ficos e renderizaÃ§Ã£o final...
                  // (mesma lÃ³gica encadeada de antes, apenas certifique-se de fechar parÃªnteses/braces adequadamente)

                  res.render('painel/painel', { dados, cidades: cidadesList, query: req.query });
                });
              });
            });
          });
        });
      });
    });
  });
}

module.exports = setupPainelRoutes;
